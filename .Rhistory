tabItems(
tabItem(tabName = "dashboard",
h3("Fine Dust Concentration Map"),
box(width=12,
fluidRow(
column(4, selectInput("concentration",label=h4("PM concentration"),
choices=list("Overall","PM10","PM2.5"),selected=1)),
column(4, selectInput("route", label = h4("Bus Route"),
choices=list("101"=1,"101-1"=2,"156"=3,"204"=4,"234"=5,"240"=6,"300"=7,"304"=8,"306"=9,"309"=10,
"323"=11,"323-1"=12,"349"=13,"356"=14,"401"=15,"403"=16,"405"=17,"410"=18,"410-1"=19,"413"=20,
"425"=21,"449"=22,"503"=23,"509"=24,"518"=25,"523"=26,"524"=27,"527"=28,"564"=29,"600"=30,
"609"=31,"618"=32,"623"=33,"649"=34,"650"=35,"651"=36,"653"=37,"655"=38,"706"=39,"708"=40,
"719"=41,"724"=42,"726"=43,"730"=44,"750"=45,"805"=46,"808"=47,"814"=48,"836"=49,"840"=50),
selected=1)),
column(4, selectInput("stopname", label = h4("Bus stop"), choices=list("a","b","c")))
),
actionButton("reset_button", "Reset view"),
leafletOutput("bus_station")
)
),
tabItem(tabName="subitem1",
h2("subitem1 tab content"),
fluidRow(
box(
title = "Plots",
plotOutput("plot1",height=250)
),
box(
title = "Controls",
sliderInput("slider","Number of obs: " , 1, 100, 50)
)
)
),
tabItem(tabName="subitem2",
box(width=12,
h1("Outline"),
h2("A Visualization of the Fine Dust Concentration"),
p("* The fine dust concentration can be divided into pm (fine dust) and pm
(minute fine dust), which can be used to check the concentration of fine dust information."),
p("* This is a Web-based service-based service that develops the ui classification
and predictive algorithm and analyzes the BigData of the particles in a fine dust
measuring instrument (DustWave) and serves as a service within a radius of 1 km (within a radius of 1 km).."),
h2("Features"),
p("* We measure the latitude, longitude, time, and fine particulate matter concentration
using the fine dust measuring sensor and aduino."),
p("* The data to be utilized in conjunction with observational data include the weather
direction, weather type, weather type, weather type, humidity, and direction of weather provided by the weather agency.")
)
),
tabItem(tabName="team",
box(
div(img(src="image3.png",height=350, width=710), style="text-align: center;"),
#img(src="image3.png",height=245, width=500,align="center"),
infoBox(width=6,"Woonjae Han (앱 개발)","portgus92@naver.com", icon=icon("mobile"),color='light-blue'),
infoBox(width=6,"Haeyin Kim (서버)","gn00090@naver.com", icon=icon("server"),color='light-blue'),
infoBox(width=6,"KyungEn Kim (통계)","kyungen@gmail.com", icon=icon("line-chart"),color='light-blue'),
infoBox(width=6,"Songwan Joun (시각화)","thddhks1256@gmail.com", icon=icon("map"),color='light-blue'),
br()
,width = 12
)
)
)
)
)
}
runApp()
shiny::runApp()
runApp()
##################################################################################################################
##작업 디렉토리 설정 / 패키지 및 라이브러리 설치
##################################################################################################################
#install.packages("leaflet")
setwd("D://0812//DustWaveProject")
library(leaflet)
library(shiny)
library(purrr)
library(rsconnect) #Deployment Interface for R Markdown Documents and Shiny Applications
##################################################################################################################
#데이터, 그림, 아이콘 설정
##################################################################################################################
#1. 데이터 불러오기
#localBusDb
localBusDb<-read.csv("data//localBusDb.csv")
localBusDb[length(localBusDb$BUS_ID)+1,]<-c(length(localBusDb$BUS_ID)+1,"묵어리",128.5555,36.5555,90,90)
localBusDb[length(localBusDb$BUS_ID)+1,]<-c(length(localBusDb$BUS_ID)+1,"묵어리",128.5655,36.5555,90,90)
localBusDb[length(localBusDb$BUS_ID)+1,]<-c(length(localBusDb$BUS_ID)+1,"묵어리",128.5755,36.5555,90,90)
localBusDb[length(localBusDb$BUS_ID)+1,]<-c(length(localBusDb$BUS_ID)+1,"묵어리",128.5855,36.5555,90,90)
#recentdata
##################################################################################################################
# server 에서 다운로드 및 파싱 -> 로컬 위치ID와 매칭
##################################################################################################################
#install.packages("curl")
#install.packages("RCurl")
#install.packages("XML")
library(XML)
library(curl)
library(RCurl)
library(httr)
library(jsonlite)
library(stringr)
recentdataall1<-getURI("http://107.20.131.63:3000/RECENTDATAALL")
recentdataall2<-str_split(recentdataall1,"_id")
recentdataall3<-unlist(str_split(recentdataall2[[1]][2],"\\\""))
str_sub(recentdataall3[c(6,8,10,12,14,16,18,20,22,24)],start=2,end=-2)
str_sub(recentdataall3[27],start=1,end=-1)
#recentdata dataframe
recentdata<-data.frame(matrix(ncol=11))
p<-str_sub(recentdataall3[c(5,7,9,11,13,15,17,19,21,23,25)],end=-1) #변수 추출(홀수)
colnames(recentdata)<-c("BUS_ID",p[2:11])
length(recentdataall2[[1]])
for(i in 1:length(recentdataall2[[1]])){
recentdataall4<-unlist(str_split(recentdataall2[[1]][i+1],"\\\""))
q1<-str_sub(recentdataall4[c(6,8,10,12,14,16,18,20,22,24)],start=2,end=-2) #값 추출(짝)
q2<-str_sub(recentdataall4[27],start=1,end=-1) #time 값
d1<-c(q1,q2)
recentdata[i,]<-d1
}
recentdata<-recentdata[1:3010,]
###error를 방지하기 위한 fake data 삽입
recentdata[length(recentdata[,1])+1,]<-c(length(recentdata[,1])+1,10,10,1,1,2,3,4,5,6,2)
recentdata[length(recentdata[,1])+1,]<-c(length(recentdata[,1])+1,40,30,1,1,2,3,4,5,6,2)
recentdata[length(recentdata[,1])+1,]<-c(length(recentdata[,1])+1,100,75,1,1,2,3,4,5,6,2)
recentdata[length(recentdata[,1])+1,]<-c(length(recentdata[,1])+1,200,200,1,1,2,3,4,5,6,2)
recentdata$BUS_ID<-as.numeric(recentdata$BUS_ID)
library(plyr)
######################################################################################
##############localBusDb와 매칭하기 by S_ID
recentdata<-join(localBusDb,recentdata,by='BUS_ID')
recentdata$PM_10<-as.numeric(recentdata$PM_10)
recentdata$PM_25<-as.numeric(recentdata$PM_25)
################################################################################################################
##################################################################################################################
#2. 데이터 처리
##data2 : 원 데이터 + PM_xx_PRED, PM_xx_COLOR, PM_XX_LEVEL, TEMP, WINDSOEED, ...
##함수 정의
getColor10 <-function(dataset){
sapply(dataset$PM_10,function(PM_10){
if(PM_10<=30){
"blue"
}else if(PM_10<=80){
"green"
}else if(PM_10<=150)
{ "yellow"
}else if(PM_10>150)
{
"red"
}else{
"grey"
}
})
}
getColor25 <-function(dataset){
sapply(dataset$PM_25,function(PM_25){
if(PM_25<=15){
"blue"
}else if(PM_25<=50){
"green"
}else if(PM_25<=100)
{
"yellow"
}else if(PM_25>100)
{
"red"
}else{
"grey"
}
})
}
getLevel10 <-function(dataset){
sapply(dataset$PM_10,function(PM_10){
if(PM_10<=30){
"좋음"
}else if(PM_10<=80){
"보통"
}else if(PM_10<=150)
{ "나쁨"
}else if(PM_10>150)
{
"매우나쁨"
}else{
"미관측"
}
})
}
getLevel25 <-function(dataset){
sapply(dataset$PM_25,function(PM_25){
if(PM_25<=15){
"좋음"
}else if(PM_25<=50){
"보통"
}else if(PM_25<=100)
{
"나쁨"
}else if(PM_25>100)
{
"매우나쁨"
}else{
"미관측"
}
})
}
getPred10<-runif(length(recentdata[,1]),0,200)
getPred25<-runif(length(recentdata[,1]),0,150)
##변수 저장
PM_10_COLOR<-getColor10(recentdata)
PM_25_COLOR<-getColor25(recentdata)
PM_10_LEVEL<-getLevel10(recentdata)
PM_25_LEVEL<-getLevel25(recentdata)
PM_10_PRED<-getPred10
PM_25_PRED<-getPred25
gridX<-recentdata$gridX #기상청사용위한 위치정보.
gridY<-recentdata$gridY
##data2에 새로운 변수를 저장
data2<-data.frame(recentdata,PM_10_COLOR,PM_25_COLOR, PM_10_LEVEL,PM_25_LEVEL)
data2$LAT<-as.numeric(data2$LAT)
data2$LON<-as.numeric(data2$LON)
##아이콘
length(data2[,1])
leafIcon<-iconList(
blue = makeIcon("blue_leaf.png",18,18),
green =makeIcon("green_leaf.png",18,18),
yellow =makeIcon( "yellow_leaf.png",18,18),
red =makeIcon( "red_leaf.png",18,18),
grey = makeIcon("grey_leaf.png",18,18)
)
#데이터 그룹
datagroup_Overall<-split(data2,data2$PM_10_COLOR)
datagroup_PM10<-split(data2,data2$PM_10_COLOR)
datagroup_PM25<-split(data2,data2$PM_25_COLOR)
##################################################################################################################
#서버 프로그래밍
##################################################################################################################
shinyServer<-function(input,output,session){
output$text1<-renderText({
return(input$stopname)
})
output$bus_station<-renderLeaflet({
var<-switch(input$concentration,
"Overall"=datagroup_Overall,
"PM10"=datagroup_PM10,
"PM2.5"=datagroup_PM25)
var2<-switch(input$concentration,
"Overall"=data2$PM_10_COLOR,
"PM10"=data2$PM_10_COLOR,
"PM2.5"=data2$PM_25_COLOR)
leaflet(data=data2) %>%
setView(lat=35.867010, lng=128.581174, zoom=12) %>%
addProviderTiles(providers$OpenStreetMap,group="Map Only",
options = providerTileOptions(minZoom = 6, maxZoom=18)) %>%
addProviderTiles(providers$OpenStreetMap,
options = providerTileOptions(minZoom = 6, maxZoom=18)) %>%
addLegend(labels = c("좋음","보통","나쁨","매우나쁨"),
colors=c("blue","green","yellow","red")) %>%
addMarkers(data=var$blue,group="좋음",
lng=var$blue$LON,####################################
lat=var$blue$LAT,
icon=leafIcon$blue,
label=~as.character(NAME),
popup=~as.character(PM_10),
clusterOptions = markerClusterOptions(removeOutsideVisibleBounds = T),
labelOptions = labelOptions(noHide = F,
direction = 'auto'))%>%
addMarkers(data=var$green,group="보통",
lng=var$green$LON,####################################
lat=var$green$LAT,
icon=leafIcon$green,
label=~as.character(NAME),
popup=~as.character(PM_10),
clusterOptions = markerClusterOptions(removeOutsideVisibleBounds = T),
labelOptions = labelOptions(noHide = F,
direction = 'auto'))%>%
addMarkers(data=var$yellow,group="나쁨",
lng=var$yellow$LON,####################################
lat=var$yellow$LAT,
icon=leafIcon$yellow,
label=~as.character(NAME),
popup=~as.character(PM_10),
clusterOptions = markerClusterOptions(removeOutsideVisibleBounds = T),
labelOptions = labelOptions(noHide = F,
direction = 'auto'))%>%
addMarkers(data=var$red,group="매우나쁨",
lng=var$red$LON,####################################
lat=var$red$LAT,
icon=leafIcon$red,
label=~as.character(NAME),
popup=~as.character(PM_10),
clusterOptions = markerClusterOptions(removeOutsideVisibleBounds = T),
labelOptions = labelOptions(noHide = F,
direction = 'auto'))%>%
addCircles(data=data2,group="Colored",color=var2) %>%
addLayersControl(
baseGroups=c("Colored","Map Only"),
overlayGroups = c("좋음","보통","나쁨","매우나쁨"),
options = layersControlOptions(collapsed = FALSE)
) %>%
hideGroup(c("보통","나쁨","매우나쁨")) #default로 무엇을 나타낼지 결정.
})
observe({
input$reset_button
leafletProxy("bus_station") %>% setView(lat=35.867010, lng=128.581174, zoom=12)
})
###########################################################################################
# sidebar의 menuItemOutput() 연동
output$slider_sidebar = renderMenu({
sidebarMenu(uiOutput("input1"))
})
output$Text_input = renderMenu({
sidebarMenu(uiOutput("input2"))
})
output$input1 = renderUI({
sliderInput("Slider", label = "Threshold", 1, 20, 5)
})
output$input2 = renderUI({
textInput("Text", label = "Text input")
})
############################################################################################
############################################################################################
set.seed(122)
histdata<-rnorm(500)
output$plot1<-renderPlot({
data<-histdata[seq_len(input$slider)]
hist(data)
############################################################################################
})
}
#deployApp()
#rsconnect::showLogs()
#runApp("C://Users//HP//Desktop//sem1//SCSC//6_16//6_16",display.mode = "showcase")
#########################################################################################
library(leaflet)
library(shiny)
library(purrr)
library(rsconnect)
library(shinydashboard)
if(interactive()){
dashboardPage(
#########################################################################################
dashboardHeader(
# Message menus
dropdownMenu(type = "messages",
messageItem(from = "Sales Dept",
message = "Mobile Applications are available now.", icon = icon("mobile")),
messageItem(from = "New User",
message = "Do you have any questions?", icon = icon("question"), time = "13:45"),
messageItem(from = "Support",
message = "The new server is ready.", icon = icon("life-ring"), time = "2017-06-23")
),
# Notification menus
dropdownMenu(type = "notifications",
notificationItem(text = "5 new users today", icon("users")),
notificationItem(text = "12 items delivered", icon("truck"),
status = "success"),
notificationItem(text = "Server load at 86%",
icon = icon("exclamation-triangle"), status = "warning")
),
# task menus
dropdownMenu(type = "tasks",
badgeStatus = "success",
taskItem(value = 90, color = "green", "mobile App"),  # Scroll bar
taskItem(value = 80, color = "aqua", "Server deployment"),
taskItem(value = 75, color = "yellow", "visualization"),
taskItem(value = 80, color = "red","Overall project")
),
title=span(tagList(icon("bus"), "Dustwave"))
), #header title
#########################################################################################
##검색 - 서버측 코드의 값은 input$searchText , input$searchButton임.
dashboardSidebar(
sidebarSearchForm(label = "Search...", "searchText", "searchButton"),
sidebarMenu(
id = "tabs",
menuItem("Dashboard",tabName="dashboard",icon=icon("dashboard"),badgeLabel = "updated", badgeColor = "green"),
# Charts
menuItem("Charts", icon = icon("bar-chart-o"),
menuSubItem("Chart sub-item 1", tabName = "subitem1"),
menuSubItem("Chart sub-item 2", tabName = "subitem2")
),
menuItem("Team",tabName="team", icon=icon("users")),
# Control Slider : server에서 연동
menuItemOutput("slider_sidebar"),
# Text Input : server에서 연동
menuItemOutput("Text_input")
)
),
#########################################################################################
dashboardBody(
tabItems(
tabItem(tabName = "dashboard",
h3("Fine Dust Concentration Map"),
box(width=12,
fluidRow(
column(4, selectInput("concentration",label=h4("PM concentration"),
choices=list("Overall","PM10","PM2.5"),selected=1)),
column(4, selectInput("route", label = h4("Bus Route"),
choices=list("101"=1,"101-1"=2,"156"=3,"204"=4,"234"=5,"240"=6,"300"=7,"304"=8,"306"=9,"309"=10,
"323"=11,"323-1"=12,"349"=13,"356"=14,"401"=15,"403"=16,"405"=17,"410"=18,"410-1"=19,"413"=20,
"425"=21,"449"=22,"503"=23,"509"=24,"518"=25,"523"=26,"524"=27,"527"=28,"564"=29,"600"=30,
"609"=31,"618"=32,"623"=33,"649"=34,"650"=35,"651"=36,"653"=37,"655"=38,"706"=39,"708"=40,
"719"=41,"724"=42,"726"=43,"730"=44,"750"=45,"805"=46,"808"=47,"814"=48,"836"=49,"840"=50),
selected=1)),
column(4, selectInput("stopname", label = h4("Bus stop"), choices=list("a","b","c")))
),
actionButton("reset_button", "Reset view"),
leafletOutput("bus_station")
)
),
tabItem(tabName="subitem1",
h2("subitem1 tab content"),
fluidRow(
box(
title = "Plots",
plotOutput("plot1",height=250)
),
box(
title = "Controls",
sliderInput("slider","Number of obs: " , 1, 100, 50)
)
)
),
tabItem(tabName="subitem2",
box(width=12,
h1("Outline"),
h2("A Visualization of the Fine Dust Concentration"),
p("* The fine dust concentration can be divided into pm (fine dust) and pm
(minute fine dust), which can be used to check the concentration of fine dust information."),
p("* This is a Web-based service-based service that develops the ui classification
and predictive algorithm and analyzes the BigData of the particles in a fine dust
measuring instrument (DustWave) and serves as a service within a radius of 1 km (within a radius of 1 km).."),
h2("Features"),
p("* We measure the latitude, longitude, time, and fine particulate matter concentration
using the fine dust measuring sensor and aduino."),
p("* The data to be utilized in conjunction with observational data include the weather
direction, weather type, weather type, weather type, humidity, and direction of weather provided by the weather agency.")
)
),
tabItem(tabName="team",
box(
div(img(src="image3.png",height=350, width=710), style="text-align: center;"),
#img(src="image3.png",height=245, width=500,align="center"),
infoBox(width=6,"Woonjae Han (앱 개발)","portgus92@naver.com", icon=icon("mobile"),color='light-blue'),
infoBox(width=6,"Haeyin Kim (서버)","gn00090@naver.com", icon=icon("server"),color='light-blue'),
infoBox(width=6,"KyungEn Kim (통계)","kyungen@gmail.com", icon=icon("line-chart"),color='light-blue'),
infoBox(width=6,"Songwan Joun (시각화)","thddhks1256@gmail.com", icon=icon("map"),color='light-blue'),
br()
,width = 12
)
)
)
)
)
}
runApp()
setwd("D://0812//DustWaveProject")
library(leaflet)
library(shiny)
library(purrr)
library(rsconnect) #Deployment Interface for R Markdown Documents and Shiny Applications
localBusDb<-read.csv("data//localBusDb.csv")
localBusDb[length(localBusDb$BUS_ID)+1,]<-c(length(localBusDb$BUS_ID)+1,"묵어리",128.5555,36.5555,90,90)
localBusDb[length(localBusDb$BUS_ID)+1,]<-c(length(localBusDb$BUS_ID)+1,"묵어리",128.5655,36.5555,90,90)
localBusDb[length(localBusDb$BUS_ID)+1,]<-c(length(localBusDb$BUS_ID)+1,"묵어리",128.5755,36.5555,90,90)
localBusDb[length(localBusDb$BUS_ID)+1,]<-c(length(localBusDb$BUS_ID)+1,"묵어리",128.5855,36.5555,90,90)
library(XML)
library(curl)
library(RCurl)
library(httr)
library(jsonlite)
library(stringr)
recentdataall1<-getURI("http://107.20.131.63:3000/RECENTDATAALL")
recentdataall2<-str_split(recentdataall1,"_id")
recentdataall3<-unlist(str_split(recentdataall2[[1]][2],"\\\""))
str_sub(recentdataall3[c(6,8,10,12,14,16,18,20,22,24)],start=2,end=-2)
recentdataall1<-getURI("http://107.20.131.63:3000/RECENTDATAALL")
GET("http://107.20.131.63:3000/RECENTDATAALL")
recentdataall1<-getURI("http://107.20.131.63:3000/RECENTDATAALL")
GET("http://107.20.131.63:3000/RECENTDATAALL")
recentdataall1<-getURI("http://107.20.131.63:3000/RECENTDATAALL")
shiny::runApp()
data2
shiny::runApp()
shiny::runApp()
View(recentdata)
shiny::runApp()
runApp()
runApp()
runApp()
shiny::runApp()
daeguBus<-read.csv("D://0812//DustWaveProject//data//daeguBus.csv")
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
daeguBus<-read.csv("D://홀로닉스//MTCC결과발표//시연자료//DustWaveProject//data//daeguBus.csv")
BUS_NAME<-daeguBus$정류소.명
localBusDb<-data.frame(BUS_NAME)
BUS_ID<-c(1:length(localBusDb$BUS_NAME))
localBusDb$BUS_ID<-BUS_ID
library(rvest)
geo1<-paste0("http://maps.googleapis.com/maps/api/geocode/xml?sensor=false&language=ko&address='",localBusDb$BUS_NAME)
LAT<-c()
LON<-c()
for(i in 1:length(localBusDb$BUS_NAME)){
LAT<-c(LAT,substr(xml_node(read_xml(geo1[i],encoding='UTF-8'),'location'),19,28))
LON<-c(LON,substr(xml_node(read_xml(geo1[i],encoding='UTF-8'),'location'),43,53))
}
shiny::runApp()
